/*============================================
 * A spark represents a sequence of shapes that
 * move along a provided path.
 *============================================*/
class Spark {

  spark(path, velocity) {
    console.log('Spark!');

    this.followPath = path;
    this.sparking = true;
    this.position = 0;          // Position is 0 to 1 where 0 is start of this.followPath and 1 is end.

    this.velocity = velocity;
  }

  onFrame(event) {
    if (this.sparking)
    {
      if (event.delta > 0.2) return;

      this.position += this.velocity * event.delta;

      this.pos = this.followPath.getPointAt(Math.min(this.position, this.followPath.length));

      // shift() dead end of tail off
      if (this.hist.length >= this.sparkLength)
      {
        this.nextPath = this.paths.shift(); // Take item from tail and make available to cache

        if (this.nextPath)
          this.nextPath.removeSegments();

        this.hist.shift(); // Remove the first segment, to make a trail

        if (this.hist.length == 0)
          this.sparking = false;
      }

      this.hist.push(this.pos);

      // Add new tail head
      if (this.hist.length > 1 && this.position < this.followPath.length)
      {
        this.nextPath = this.pathCallback(this.position, this.hist, this.nextPath);

        this.paths.push(this.nextPath);
        this.nextPath = undefined;
      }
    }
  }

  // Spark()
  constructor(options) {
    this.id = options.id || -1;               // index of this spark
    this.pathCallback = options.pathCallback; // A function to call to draw each element of the spark.
    this.vel = undefined;                     // Paper.js Point of the velocity
    this.sparkLength = options.sparkLength || 25;   // Number of shapes for this spark

    this.hist = [];                           // History of all points this spark has visited up to this.sparkLength
    this.paths = [];                          // Paper.js Paths of this spark, one for each segment. Generated by
                                              // this.pathCallback
    this.sparking = false;
    this.pos = undefined;
  }
}

export default Spark;